---
version: '2.0'

default.DiagnoseFlow:
  type: direct
  input:
    - diagnosedata
    - kafka_receive_valid: "Kafka_Receive_Diagnosis"
    - workflow: "DiagnoseFlow"
    - NeiborDown: "Run NeighborDown Validation"
    - EquipmentFan: "Run EquipmentFan Validation"
    - EqipmentPhysical: "Run EquipmentPhysicalPort Validation"
    - BGPRouter: "Run BGPRouterDown Validation"
    - TimingReference: "Run TimingReference Validation"
    - TDMEquipment: "Run TDMEquipmentDown validation"
    - DryAlarm: "Run DryContactAlarm Validation"
    - LSPAlarm: "Run PathAlarmsLSP Validation"
    - PowerSupply: "Run PowerSupply Validation"
    - Linkdown: "Run TransportLinkDownAlarm Validation"
    - ps: "Power_Supply_1"
  tasks:
    read_kafka_data:
      # [105, 26]
      action: core.echo
      input:
        message: <% $.diagnosedata %>
      publish:
        kafkadata: <% task(read_kafka_data).result.stdout %>
      on-success:
        - replace_chars
    replace_chars:
      # [105, 128]
      action: core.echo
      input:
        message: "Replacing unknown characters with space"
      publish:
        replace:  "{{ _.kafkadata | replace(\" u'\",\"'\")}}"
      on-success:
        - fetch_nodes
    fetch_nodes:
      # [105, 230]
      action: core.echo
      input:
        message: "Fetching node items from kafka data"
      publish:
        nodeop: "{%set data = _.replace %}{% set nodes = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'Node'\" %}{% set max_val = value.split(':')[1]|length %}{{-nodes.append(value.split(':')[1])-}}{% endif %}{% endfor %}{{-nodes-}}"
        smop: "{%set data = _.replace %}{% set summaries = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'Summary'\" %}{% set max_val = value.split(':')[1]|length %}{{-summaries.append(value.split(':')[1])-}}{% endif %}{% endfor %}{{-summaries-}}"
        ssop: "{%set data = _.replace %}{% set serverserials = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'ServerSerial'\" %}{{-serverserials.append(value.split(':')[1])-}}{% endif %}{% endfor %}{{-serverserials-}}"
        #fsop: "{%set data = _.replace %}{% set first_occurs = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'FirstOccurrence'\" %}{{-first_occurs.append(value.split(':')[1])-}}{% endif %}{% endfor %}{{-first_occurs-}}"
        fsop: "{%set data = _.replace %}{% set first_occurs = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'FirstOccurrence'\" %}{{-first_occurs.append(value.split(':')[1] ~ \":\" ~ value.split(':')[2] ~ \":\" ~ value.split(':')[3])-}}{% endif %}{% endfor %}{{-first_occurs-}}"
        lsop: "{%set data = _.replace %}{% set last_occurs = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'LastOccurrence'\" %}{{-last_occurs.append(value.split(':')[1] ~ \":\" ~ value.split(':')[2] ~ \":\" ~ value.split(':')[3])-}}{% endif %}{% endfor %}{{-last_occurs-}}"
        #lsop: "{%set data = _.replace %}{% set last_occurs = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'LastOccurrence'\" %}{{-last_occurs.append(value.split(':')[1])-}}{% endif %}{% endfor %}{{-last_occurs-}}"
        snop: "{%set data = _.replace %}{% set servernames = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'ServerName'\" %}{% set max_val = value.split(':')[1]|length %}{{-servernames.append(value.split(':')[1])-}}{% endif %}{% endfor %}{{-servernames-}}"
        agop: "{%set data = _.replace %}{% set alertgrps = [] %}{% set elem_split = data.split(',')%}{% for value in elem_split %}{% if value.split(':')[0] == \"'AlertGroup'\" %}{% set max_val = value.split(':')[1]|length %}{{-alertgrps.append(value.split(':')[1])-}}{% endif %}{% endfor %}{{-alertgrps-}}"
      on-success:
        - replace_UnChars 
    replace_UnChars:
      # [105, 332]
      action: core.echo
      input:
        message: "REplacing final unknown characters with space"
      publish:
        nodes: "{{ _.nodeop | replace('None','') | replace('[','') | replace(']','') | replace('u','') | replace(\"'\",'') | replace('\"','')}}"
        summary: "{{ _.smop | replace('None','') | replace('[','') | replace(']','') | replace('\"','')| replace('u','') | replace(\"'\",'') }}"
        #summary: "{{ _.smop | replace('None','') | replace('[','') | replace(']','') | replace('\"','') | replace(\"'\",'') }}"
        serverserial: "{{ _.ssop | replace('None','') | replace('[','') | replace(']','') | replace('u','') | replace(\"'\",'') }}"
        firstoccurrence: "{{ _.fsop | replace('None','') | replace('[','') | replace(']','') | replace('u','') | replace('\"','') | replace(\"'\",'')}}"
        lastoccurrence: "{{ _.lsop | replace('None','') | replace('[','') | replace(']','') | replace('u','') | replace(\"'\",'') | replace('\"','') }}"
        servername: "{{ _.snop | replace('None','') | replace('[','') | replace(']','') | replace('u','') | replace(\"'\",'') | replace('\"','')}}"
        alertgroup: "{{ _.agop | replace('None','') | replace('[','') | replace(']','') | replace('u','') | replace(\"'\",'') | replace('\"','')}}"
      on-success:
        - VerifyEvents
    VerifyEvents:
      # [105, 434]
      action: core.echo
      input:
        message: "Verifying the incoming kafka events"
      publish:
        customtext: "{% if 'NeighborDown' in _.summary %}{{_.NeiborDown}}{% elif 'ChannelGrop' in _.summary %}{{_.TDMEquipment}}{% elif 'Rack' in _.summary %}{{_.EquipmentFan}}{% elif (('PhysicalPort' in _.summary) and ('equipmentAlarm' in _.alertgroup))%}{{_.EqipmentPhysical}}{% elif 'BGP' in _.summary %}{{_.BGPRouter}}{% elif 'TimingReference' in _.summary %}{{_.TimingReference}}{% elif 'Commercial' in _.summary %}{{_.DryAlarm}}{% elif 'LspDown' in _.summary %}{{_.LSPAlarm}}{% elif 'Power' in _.summary %}{{_.PowerSupply}}{% elif (('PhysicalPort' in _.summary) and ('LinkDown' in _.alertgroup)) %}{{_.Linkdown}}{% endif %}"
        #customtext: "{% if regex_search(_.summary,_.ps) %}{{_.PowerSupply}}{%endif%}"
        #customtext: "{% if 'NeighborDown' in _.summary %}{{_.NeiborDown}}{% elif 'ChannelGroup' in _.summary %}{{_.TDMEquipment}}{% elif 'Rack' in _.summary %}{{_.EquipmentFan}}{% elif 'PhysicalPort' in _.summary %}{{_.EqipmentPhysical}}{% elif 'BGP' in _.summary %}{{_.BGPRouter}}{% elif 'TimingReference' in _.summary %}{{_.TimingReference}}{% elif 'Commercial' in _.summary %}{{_.DryAlarm}}{% elif 'DynamicLsp' in _.summary %}{{_.LSPAlarm}}{% endif %}"
        #customtext: "{% if 'NeighborDown' in _.summary %}{{_.NeiborDown}}{% elif 'Rack' in _.summary %}{{_.TDMEquipment}}{% elif 'PhysicalPort' in _.summary %}{{_.EqipmentPhysical}}{% elif 'BGP' in _.summary %}{{_.BGPRouter}}{% elif 'TimingReference' in _.summary %}{{_.TimingReference}}{% endif %}"
      on-success:
        - task1
    task1:
      # [105, 536]
      action: kafka.produce
      input:
        topic: "netcoolwrt2"
        message: '{"node":"{{_.nodes}}", "summary":"{{_.summary}}", "firstoccurrence":"{{_.firstoccurrence}}", "lastoccurrence":"{{_.lastoccurrence}}", "serverserial":"{{_.serverserial}}", "servername":"{{_.servername}}", "ImpactHandlingStatus":"{{_.kafka_receive_valid}}", "customtext":"{{_.customtext}}", "workflow":"{{_.workflow}}"}'
      publish:
        finaldata: "Inserted data to kafka"
    